{
  "info": {
    "_postman_id": "jwt-authenticator-updated-collection",
    "name": "JWT Authenticator API - Updated Collection",
    "description": "Updated API collection for JWT Authenticator microservice with new public forward endpoint and removed X-Brand-Id requirements.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "3.0.0"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Register User",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"{{testPassword}}\",\n    \"email\": \"{{testEmail}}\",\n    \"firstName\": \"{{testFirstName}}\",\n    \"lastName\": \"{{testLastName}}\",\n    \"phoneNumber\": \"{{testPhoneNumber}}\",\n    \"location\": \"{{testLocation}}\",\n    \"brandId\": \"{{tenantId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            },
            "description": "Register a new user account with complete profile information"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 201\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                  "});",
                  "",
                  "if (pm.response.code === 200 || pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    if (response.userId) {",
                  "        pm.environment.set('registeredUserId', response.userId);",
                  "    }",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login with Username",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login/username",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login", "username"]
            },
            "description": "Login with username and password"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "    pm.environment.set('userId', response.userId);",
                  "    pm.environment.set('brandId', response.brandId);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Login with Email",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login/email",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login", "email"]
            },
            "description": "Login with email and password"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "    pm.environment.set('userId', response.userId);",
                  "    pm.environment.set('brandId', response.brandId);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Refresh Token",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "\"{{refreshToken}}\""
            },
            "url": {
              "raw": "{{baseUrl}}/auth/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "refresh"]
            },
            "description": "Refresh access token using refresh token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Forward Requests",
      "item": [
        {
          "name": "Authenticated Forward Request",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"{{testForwardUrl}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/forward",
              "host": ["{{baseUrl}}"],
              "path": ["api", "forward"]
            },
            "description": "Forward request to external API with authentication (X-Brand-Id header removed)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 30000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Public Forward Request",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"{{testForwardUrl}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/public-forward",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "public-forward"]
            },
            "description": "Forward request to external API without authentication (NEW PUBLIC ENDPOINT)"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response time is less than 30000ms\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(30000);",
                  "});",
                  "",
                  "pm.test(\"No authentication required\", function () {",
                  "    // This test passes if we get a 200 response without auth headers",
                  "    pm.expect(pm.response.code).to.equal(200);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Public Forward - Rate Limiting Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"{{testForwardUrl}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/public-forward",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "public-forward"]
            },
            "description": "Test rate limiting on public endpoint by sending multiple requests"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 429\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test(\"Rate limit response includes Retry-After header\", function () {",
                  "        pm.expect(pm.response.headers.get('Retry-After')).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "Authenticated Forward - Rate Limiting Test",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"url\": \"{{testForwardUrl}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/forward",
              "host": ["{{baseUrl}}"],
              "path": ["api", "forward"]
            },
            "description": "Test rate limiting on authenticated endpoint"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 429\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 429]);",
                  "});",
                  "",
                  "if (pm.response.code === 429) {",
                  "    pm.test(\"Rate limit response includes Retry-After header\", function () {",
                  "        pm.expect(pm.response.headers.get('Retry-After')).to.exist;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Protected Endpoints",
      "item": [
        {
          "name": "Get Protected Resource",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/protected",
              "host": ["{{baseUrl}}"],
              "path": ["api", "protected"]
            },
            "description": "Access a protected resource with JWT authentication"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user information\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "    pm.expect(response).to.have.property('userId');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get User Profile",
          "request": {
            "auth": {
              "type": "bearer",
              "bearer": [
                {
                  "key": "token",
                  "value": "{{accessToken}}",
                  "type": "string"
                }
              ]
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/user-profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "user-profile"]
            },
            "description": "Get user profile information"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains user profile\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('userId');",
                  "    pm.expect(response).to.have.property('username');",
                  "    pm.expect(response).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Password Reset",
      "item": [
        {
          "name": "Forgot Password",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{registeredUserId}}\",\n    \"email\": \"{{testEmail}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/forgot-password",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "forgot-password"]
            },
            "description": "Initiate password reset process"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains success message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Two-Factor Authentication",
      "item": [
        {
          "name": "Setup 2FA",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/tfa/setup?username={{testUsername}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "tfa", "setup"],
              "query": [
                {
                  "key": "username",
                  "value": "{{testUsername}}"
                }
              ]
            },
            "description": "Setup 2FA for a user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response contains 2FA secret\", function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('2FA secret generated');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Enable 2FA",
          "request": {
            "method": "POST",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/auth/tfa/enable?username={{testUsername}}",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "tfa", "enable"],
              "query": [
                {
                  "key": "username",
                  "value": "{{testUsername}}"
                }
              ]
            },
            "description": "Enable 2FA for a user"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response confirms 2FA enabled\", function () {",
                  "    const responseText = pm.response.text();",
                  "    pm.expect(responseText).to.include('2FA enabled');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Google Sign-In",
      "item": [
        {
          "name": "Google Sign-In",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"idToken\": \"{{googleIdToken}}\",\n    \"brandId\": \"{{tenantId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/google",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "google"]
            },
            "description": "Sign in with Google ID token"
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.environment.set('accessToken', response.accessToken);",
                  "    pm.environment.set('refreshToken', response.refreshToken);",
                  "    pm.environment.set('userId', response.userId);",
                  "    pm.environment.set('brandId', response.brandId);",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/myapp",
      "type": "string"
    },
    {
      "key": "testUsername",
      "value": "testuser123",
      "type": "string"
    },
    {
      "key": "testPassword",
      "value": "TestPassword123!",
      "type": "string"
    },
    {
      "key": "testEmail",
      "value": "test@example.com",
      "type": "string"
    },
    {
      "key": "testFirstName",
      "value": "Test",
      "type": "string"
    },
    {
      "key": "testLastName",
      "value": "User",
      "type": "string"
    },
    {
      "key": "testPhoneNumber",
      "value": "+1234567890",
      "type": "string"
    },
    {
      "key": "testLocation",
      "value": "Test City, Test Country",
      "type": "string"
    },
    {
      "key": "tenantId",
      "value": "MRTFY000001",
      "type": "string"
    },
    {
      "key": "testForwardUrl",
      "value": "https://httpbin.org/json",
      "type": "string"
    },
    {
      "key": "timeoutTestUrl",
      "value": "https://httpbin.org/delay/10",
      "type": "string"
    },
    {
      "key": "googleIdToken",
      "value": "your_google_id_token_here",
      "type": "string"
    }
  ]
}