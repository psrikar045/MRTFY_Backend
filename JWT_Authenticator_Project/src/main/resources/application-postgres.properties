# Database Configuration - supports environment variables for deployment
#spring.datasource.url=jdbc:postgresql://database-1.ctoysco66obu.eu-north-1.rds.amazonaws.com:5432/myprojectdb
#spring.datasource.username=postgres
#spring.datasource.password=srikar045

spring.datasource.url=jdbc:postgresql://202.65.155.115:5432/postgres
spring.datasource.username=postgres
spring.datasource.password=Marketyfy@123
spring.datasource.driver-class-name=org.postgresql.Driver

# Set to "update" for first run with API keys, then can change to "validate"
# Options: create, create-drop, update, validate, none
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
spring.jpa.properties.hibernate.format_sql=true

# Connection Pool Configuration - Optimized for PostgreSQL max_connections=90
# ✅ OPTIMIZED: Using ~60% of available connections (54/90) leaving room for admin/other apps
spring.datasource.hikari.maximum-pool-size=54
spring.datasource.hikari.minimum-idle=12
# ✅ FIXED: Reasonable connection timeout 10 seconds)
spring.datasource.hikari.connection-timeout=10000
# ✅ OPTIMIZED: Longer idle timeout to reduce connection cycling (15 minutes)
spring.datasource.hikari.idle-timeout=900000
# ✅ OPTIMIZED: Longer max lifetime to reduce connection recreation overhead (30 minutes)  
spring.datasource.hikari.max-lifetime=1800000
# ✅ OPTIMIZED: Less aggressive leak detection to avoid false positives (60 seconds)
spring.datasource.hikari.leak-detection-threshold=60000
# ✅ ADDED: Connection keepalive to prevent idle connection drops (5 minutes)
spring.datasource.hikari.keepalive-time=300000
spring.datasource.hikari.pool-name=HikariCP-Main
# ✅ FIXED: Connection validation and cleanup settings
spring.datasource.hikari.auto-commit=true
spring.datasource.hikari.validation-timeout=5000
spring.datasource.hikari.initialization-fail-timeout=30000
# ✅ FIXED: Proper connection validation and resilience
# Prefer JDBC4 isValid() for validation (connection-test-query removed)
spring.datasource.hikari.register-mbeans=true

# JPA Memory and Batch Processing Optimizations
spring.jpa.properties.hibernate.jdbc.batch_size=50
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
spring.jpa.properties.hibernate.generate_statistics=false
# ✅ ADDED: Batch fetch optimization for collections
spring.jpa.properties.hibernate.batch_fetch_style=DYNAMIC
spring.jpa.properties.hibernate.default_batch_fetch_size=25

# ✅ FIXED: Transaction management for connection leak prevention
spring.jpa.properties.hibernate.connection.provider_disables_autocommit=false
spring.jpa.properties.hibernate.connection.autocommit=true
# ✅ OPTIMIZED: Longer transaction timeout for complex operations (5 minutes)
spring.transaction.default-timeout=300
spring.jpa.properties.hibernate.transaction.coordinator_class=jdbc
# ✅ OPTIMIZED: Longer query timeout for complex dashboard queries (60 seconds)
spring.jpa.properties.hibernate.query.timeout=60000
# ✅ ADDED: Socket timeout for connection safety (PostgreSQL uses SECONDS)
spring.datasource.hikari.data-source-properties.socketTimeout=65
spring.datasource.hikari.data-source-properties.loginTimeout=30
spring.datasource.hikari.data-source-properties.connectTimeout=10
spring.datasource.hikari.data-source-properties.tcpKeepAlive=true
spring.datasource.hikari.data-source-properties.reWriteBatchedInserts=true

# Tomcat Configuration - Balanced with HikariCP pool (54 max connections)
server.tomcat.max-threads=40
server.tomcat.min-spare-threads=8  
server.tomcat.max-connections=800
# ✅ FIXED: Reasonable connection timeout (20 seconds)
server.tomcat.connection-timeout=20000
